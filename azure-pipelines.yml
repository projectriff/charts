variables:
  fatsDir: '$(system.defaultWorkingDirectory)/../fats'
  fatsRepo: projectriff/fats
  fatsRefspec: runtimes # TODO get back to master
  tillerNamespace: kube-system
  tillerServiceAccount: tiller

jobs:

- job: test_pr
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    CLUSTER:  'minikube'
    REGISTRY: 'docker-daemon'
    CLUSTER_NAME: 'charts-$(Build.BuildId)-minikube'
    NAMESPACE: '$(CLUSTER_NAME)'
    RUNTIME: core
    FATS_DIR: $(fatsDir)
    FATS_REPO: $(fatsRepo)
    FATS_REFSPEC: $(fatsRefspec)
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  steps:
  - bash: ./ci/fats-fetch.sh $(fatsDir) $(fatsRefspec) $(fatsRepo)
    displayName: 'Fetch FATS'
  - bash: |
      $(fatsDir)/install.sh kubectl
      $(fatsDir)/install.sh riff
      $(fatsDir)/install.sh helm
      $(fatsDir)/install.sh ytt 0.14.0
      sudo snap install yq
    displayName: 'Install tools'
  - bash: |
      helm init --client-only
      make clean package
    displayName: 'Package charts'
  - bash: $(fatsDir)/start.sh
    displayName: 'Start FATS'
  - bash: ./ci/install-riff.sh ./repository/istio-$(cat VERSION).tgz ./repository/riff-$(cat VERSION).tgz
    displayName: 'Install riff'
  - bash: ./ci/run-tests.sh
    displayName: 'Run tests'
  - bash: ci/diagnostics.sh
    condition: failed()
    displayName: 'Collect diagnostics'
  - bash: ./ci/cleanup-riff.sh
    condition: always()
    displayName: 'Uninstall riff'
  - bash: $(fatsDir)/cleanup.sh
    condition: always()
    displayName: 'Cleanup FATS'
  displayName: 'Test PR'

- job: stage
  pool:
    vmImage: 'ubuntu-16.04'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  steps:
  - bash: ./ci/fats-fetch.sh $(fatsDir) $(fatsRefspec) $(fatsRepo)
    displayName: 'Fetch FATS'
  - bash: |
      $(fatsDir)/install.sh helm
      $(fatsDir)/install.sh gcloud
      $(fatsDir)/install.sh ytt 0.14.0
      sudo snap install yq
    env:
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
    displayName: 'Install tools'
  - bash: ./ci/stage.sh
    displayName: 'Stage projectriff chart artifacts'
  displayName: 'Stage chart'

- job: test
  dependsOn: stage
  strategy:
    matrix:
      minikube:
        imageName: ubuntu-16.04
        qualifier: minikube
        cluster: minikube
        registry: dockerhub
        runtime: core
      gke:
        imageName: ubuntu-16.04
        qualifier: gke
        cluster: gke
        registry: gcr
        runtime: knative
  pool:
    vmImage: $(imageName)
  variables:
    CLUSTER:  '$(cluster)'
    REGISTRY: '$(registry)'
    CLUSTER_NAME: 'charts-$(Build.BuildId)-$(qualifier)'
    NAMESPACE: '$(CLUSTER_NAME)'
    RUNTIME: '$(runtime)'
    FATS_DIR: $(fatsDir)
    FATS_REPO: $(fatsRepo)
    FATS_REFSPEC: $(fatsRefspec)
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  steps:
  - bash: ./ci/fats-fetch.sh $(fatsDir) $(fatsRefspec) $(fatsRepo)
    displayName: 'Fetch FATS'
  - bash: |
      $(fatsDir)/install.sh kubectl
      $(fatsDir)/install.sh riff
      $(fatsDir)/install.sh helm
      $(fatsDir)/install.sh gcloud
    displayName: 'Install tools'
    env:
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
  - bash: $(fatsDir)/start.sh
    displayName: 'Start FATS'
    env:
      DOCKER_USERNAME: '$(DockerUsername)'
      DOCKER_PASSWORD: '$(DockerPassword)'
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
  - bash: ./ci/install-riff.sh
    env:
      DOCKER_USERNAME: '$(DockerUsername)'
      DOCKER_PASSWORD: '$(DockerPassword)'
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
    displayName: 'Install riff'
  - bash: ./ci/run-tests.sh
    displayName: 'Run tests'
    env:
      DOCKER_USERNAME: '$(DockerUsername)'
      DOCKER_PASSWORD: '$(DockerPassword)'
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
  - bash: ci/diagnostics.sh
    condition: failed()
    displayName: 'Collect diagnostics'
  - bash: ./ci/cleanup-riff.sh
    condition: always()
    displayName: 'Uninstall riff'
  - bash: $(fatsDir)/cleanup.sh
    env:
      DOCKER_USERNAME: '$(DockerUsername)'
      DOCKER_PASSWORD: '$(DockerPassword)'
    condition: always()
    displayName: 'Cleanup FATS'
  displayName: 'Test'

- job: publish
  dependsOn: test
  pool:
    vmImage: ubuntu-16.04
  condition: |
    and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      or(
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        and(
          startsWith(variables['Build.SourceBranch'], 'refs/heads/v'),
          endsWith(variables['Build.SourceBranch'], 'x')
        )
      )
    )
  steps:
  - bash: ./ci/fats-fetch.sh $(fatsDir) $(fatsRefspec) $(fatsRepo)
    displayName: 'Fetch FATS'
  - bash: |
      $(fatsDir)/install.sh helm
      $(fatsDir)/install.sh gcloud
    displayName: 'Install tools'
    env:
      GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
  - bash: ./ci/publish.sh
    displayName: 'Publish Chart'
  displayName: 'Publish'
  